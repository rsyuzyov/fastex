#Область API

Функция Help(ЗапросHTTP)
	
	Макет = ПолучитьОбщийМакет("Fastex_Help");
	Тело = Макет.ПолучитьТекст();
	
	Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, Тело);
	
КонецФункции

Функция Ping(ЗапросHTTP)
	Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, "Pong");
КонецФункции

Функция Nodes(ЗапросHTTP)
	
	Попытка
		ИмяПланаОбмена = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "plan");
		ТолькоАктивные = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "activeonly") = Истина;
		КодЭлемента = ЗапросHTTP.ПараметрыЗапроса.Получить("code");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			|	План.Ссылка.Код КАК Код,
			|	План.Ссылка.Наименование КАК Наименование,
			|	ЕстьNULL(НастройкиУТМ.АдресУТМ, """") КАК IP,
			|	План.Магазин.ПродажиЗапрещены КАК Архивный
			|ИЗ
			|	ПланОбмена.ПоМагазину.Магазины КАК План
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУТМ КАК НастройкиУТМ
			|		ПО План.Магазин = НастройкиУТМ.Магазин
			|ГДЕ
			| 	&ОтборПоКоду И 
			|	&ОтборАрхивных";
		Если ПустаяСтрока(КодЭлемента) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборАрхивных", ?(ТолькоАктивные, "НЕ План.Магазин.ПродажиЗапрещены", "ИСТИНА"));
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоКоду", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборАрхивных", "ИСТИНА");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоКоду", "План.Ссылка.Код = &Код");
			Запрос.УстановитьПараметр("Код", КодЭлемента);
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПоМагазину", ИмяПланаОбмена);
		Результат = Запрос.Выполнить().Выгрузить();
		
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, Результат);
		
	Исключение
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция Node_Info(ЗапросHTTP)
	
	Попытка
		ИмяПланаОбмена = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "plan");
		СистемнаяИнформация = Новый СистемнаяИнформация;
		
		Результат = Новый Структура;
		Результат.Вставить("confname", Метаданные.Имя);
		Результат.Вставить("confversion", Метаданные.Версия);
		Результат.Вставить("version", ВерсияИБ());
		Результат.Вставить("extensions", РасширенияИБ());
		Результат.Вставить("platformversion", СистемнаяИнформация.ВерсияПриложения);
		Результат.Вставить("computername", ИмяКомпьютера());
		Результат.Вставить("osversion", СистемнаяИнформация.ВерсияОС);
		Результат.Вставить("platformtype", Строка(СистемнаяИнформация.ТипПлатформы));
		Результат.Вставить("memory", XMLСтрока(СистемнаяИнформация.ОперативнаяПамять));
		Результат.Вставить("cpu", СистемнаяИнформация.Процессор);
		Результат.Вставить("bindir", ОбщегоНазначенияFastex.ПолучитьКаталогПрограммы());
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, Результат);
	
	Исключение
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция Node_Version(ЗапросHTTP)
	
	Попытка
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, ВерсияИБ());
	
	Исключение
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция Node_SetLastSync(ЗапросHTTP)
	
	Попытка
		Узел = УзелОбменаИзПараметровЗапроса(ЗапросHTTP);
		Действие = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "action");
		ДатаНачала = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "startdate");
		Результат = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "result");
		ДатаОкончания = ТекущаяДата();
		
		Набор = РегистрыСведений.СостоянияОбменовДанными.СоздатьНаборЗаписей();
		Набор.Отбор.УзелИнформационнойБазы.Установить(Узел, Истина);
		Набор.Отбор.ДействиеПриОбмене.Установить(Перечисления.ДействияПриОбмене[Действие], Истина);
		Запись = Набор.Добавить();
		Запись.Активность = Истина;
		Запись.УзелИнформационнойБазы = Узел;
		Запись.ДействиеПриОбмене = Перечисления.ДействияПриОбмене[Действие];
		Запись.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена[Результат];
		Запись.ДатаНачала = ДатаНачала;
		Запись.ДатаОкончания = ДатаОкончания;
		Набор.Записать();
		
		Если Результат = "Выполнено" Тогда
			Набор = РегистрыСведений.СостоянияУспешныхОбменовДанными.СоздатьНаборЗаписей();
			Набор.Отбор.УзелИнформационнойБазы.Установить(Узел, Истина);
			Набор.Отбор.ДействиеПриОбмене.Установить(Перечисления.ДействияПриОбмене[Действие], Истина);
			Запись = Набор.Добавить();
			Запись.Активность = Истина;
			Запись.УзелИнформационнойБазы = Узел;
			Запись.ДействиеПриОбмене = Перечисления.ДействияПриОбмене[Действие];
			Запись.ДатаОкончания = ДатаОкончания;
			Набор.Записать();
		
		КонецЕсли;
		
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, "ok");
	
	Исключение
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция Node_GetLastSync(ЗапросHTTP)
	
	Попытка
		Узел = УзелОбменаИзПараметровЗапроса(ЗапросHTTP);
		Действие = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "action");
		
		Набор = РегистрыСведений.СостоянияУспешныхОбменовДанными.СоздатьНаборЗаписей();
		Набор.Отбор.УзелИнформационнойБазы.Установить(Узел, Истина);
		Набор.Отбор.ДействиеПриОбмене.Установить(Перечисления.ДействияПриОбмене[Действие], Истина);
		Набор.Прочитать();
		Если Набор.Количество() = 0 Тогда
			Результат = Дата("00010101");
		Иначе
			Результат = Набор[0].ДатаОкончания;
		КонецЕсли;
		
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, Результат);
	
	Исключение
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция Node_SinceLastSync(ЗапросHTTP)
	
	Попытка
		Узел = УзелОбменаИзПараметровЗапроса(ЗапросHTTP);
		Действие = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "action");
		
		Результат = "0";
		Попытка
			Набор = РегистрыСведений.СостоянияУспешныхОбменовДанными.СоздатьНаборЗаписей();
			Набор.Отбор.УзелИнформационнойБазы.Установить(Узел, Истина);
			Набор.Отбор.ДействиеПриОбмене.Установить(Перечисления.ДействияПриОбмене[Действие], Истина);
			Набор.Прочитать();
			Если Набор.Количество() > 0 Тогда
				Результат = XMLСтрока(ТекущаяДата() - Набор[0].ДатаОкончания);
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если Результат = "0" Тогда
			Попытка
				ИмяКолонкиДляВозврата = ?(Действие = "ЗагрузкаДанных", "ДатаПоследнейЗагрузки", "ДатаПоследнейВыгрузки");
				ОграничениеДляЗапроса = "РезультатПоследнейЗагрузки = Истина";
				Запрос = Новый Запрос();
				Запрос.Текст = "ВЫБРАТЬ
				               |	Максимум(История." + ИмяКолонкиДляВозврата + ") КАК Дата,
				               |	Максимум(История.Период) КАК Период
				               |ИЗ
				               |	РегистрСведений.ИсторияОбменаДанными.СрезПоследних(, УзелИнформационнойБазы = &Узел И " + ОграничениеДляЗапроса + ") КАК История";
				Запрос.УстановитьПараметр("Узел", Узел);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ДатаОбмена = ?(Выборка.Дата = NULL, Дата('00010101'), Выборка.Дата);
				КонецЕсли;
				Результат = XMLСтрока(ТекущаяДата() - ДатаОбмена);
			Исключение
			КонецПопытки;
		КонецЕсли;
	
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, Результат);
	
	Исключение
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция Queue_Add(ЗапросHTTP)
	
	Попытка
		Массив = ДесериализоватьПараметрЗапроса(ЗапросHTTP, "data");
		Получатель = УзелОбменаИзПараметровЗапроса(ЗапросHTTP);
		Получатели = Новый Массив;
		Получатели.Добавить(Получатель);
		Для каждого Ссылка Из Массив Цикл
			Ссылка = Десериализовать(Ссылка);
			ПланыОбмена.ЗарегистрироватьИзменения(Получатели, Ссылка);
		КонецЦикла;
		
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, "ok");
	
	Исключение
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция Queue_Read(ЗапросHTTP)
	
	Попытка
		Результат = Новый Массив;
		Получатель = УзелОбменаИзПараметровЗапроса(ЗапросHTTP);
		Количество = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "count");
		Количество = ?(ЗначениеЗаполнено(Количество) И НЕ Количество = "0", Количество, Неопределено);
		ИмяТипа = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "type");
		Сжатие = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "compression") = "true";
		Поток = Ложь;
		
		ВыполнитьДействияПередЧтениемИзменений(Получатель);
		
		Если ИмяТипа = Неопределено Тогда
			Массив = ПолучитьИзмененияДляУзла(Получатель, Получатель.НомерОтправленного + 1, Количество);
			Для каждого ТекущийОбъект Из Массив Цикл
				ДанныеСтрокой = Сериализовать(ТекущийОбъект);
				Если СтрДлина(ДанныеСтрокой) > 10000000 Тогда
					Результат.Добавить(Сериализовать(ТекущийОбъект, , "Поток"));
				Иначе
					Результат.Добавить(ДанныеСтрокой);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			Если СтрНачинаетсяС(ИмяТипа, "Регистр") Тогда
				Менеджер = Новый(СтрЗаменить(ИмяТипа, ".", "Менеджер."));
				Запрос = Новый Запрос;
				Запрос.Текст = СтрШаблон("ВЫБРАТЬ %1 * ИЗ %2.Изменения Где Узел = &Получатель", ?(ЗначениеЗаполнено(Количество), "ПЕРВЫЕ " + Количество, ""), ИмяТипа);
				Запрос.УстановитьПараметр("Получатель", Получатель);
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Набор = Менеджер.СоздатьНаборЗаписей();
					МД = Набор.Метаданные();
					Если СтрНайти(ИмяТипа, "Накопления") > 0 ИЛИ СтрНайти(ИмяТипа, "Бухгалтерии") > 0 ИЛИ СтрНайти(ИмяТипа, "Сведений") > 0 И Строка(МД.РежимЗаписи) = "ПодчинениеРегистратору" Тогда
						Набор.Отбор.Регистратор.Установить(Выборка.Регистратор, Истина);
					Иначе
						Для каждого ИзмерениеМД Из МД.Измерения Цикл
							Если ИзмерениеМД.ОсновнойОтбор Тогда
								Набор.Отбор[ИзмерениеМД.Имя].Установить(Выборка[ИзмерениеМД.Имя], Истина);
							КонецЕсли;
						КонецЦикла;
						Если МД.ОсновнойОтборПоПериоду Тогда
							Набор.Отбор.Период.Установить(Выборка.Период, Истина);
						КонецЕсли;
					КонецЕсли;
					Набор.Прочитать();
					ДанныеСтрокой = Сериализовать(Набор);
					Если СтрДлина(ДанныеСтрокой) > 10000000 Тогда
						Результат.Добавить(Сериализовать(Набор, , "Поток"));
					Иначе
						Результат.Добавить(ДанныеСтрокой);
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = СтрШаблон("ВЫБРАТЬ %1 Ссылка ИЗ %2.Изменения ГДЕ Узел = &Получатель", ?(ЗначениеЗаполнено(Количество), "ПЕРВЫЕ " + Количество, ""), ИмяТипа);
				Запрос.УстановитьПараметр("Получатель", Получатель);
				Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
				Для каждого Ссылка Из Массив Цикл
					Объект = Ссылка.ПолучитьОбъект();
					Если Объект = Неопределено Тогда
						Объект = Новый УдалениеОбъекта(Ссылка);
						ПланыОбмена.УдалитьРегистрациюИзменений(Получатель, Ссылка);
					КонецЕсли;
					
					ДанныеСтрокой = Сериализовать(Объект);
					Если СтрДлина(ДанныеСтрокой) > 10000000 Тогда
						Результат.Добавить(Сериализовать(Ссылка.ПолучитьОбъект(), , "Поток"));
					Иначе
						Результат.Добавить(ДанныеСтрокой);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Количество = Результат.Количество();
		Результат = Сериализовать(Результат);
		Если Сжатие Тогда
			Результат = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(6));
			Результат = Сериализовать(Результат);
		КонецЕсли;
		
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, Новый Структура("Количество, Данные, Сжатие", Количество, Результат, Сжатие));
	
	Исключение
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция Queue_Delete(ЗапросHTTP)
	
	Попытка
		Получатель = УзелОбменаИзПараметровЗапроса(ЗапросHTTP);
		Данные = ДесериализоватьПараметрЗапроса(ЗапросHTTP, "data");
		Для каждого Ссылка Из Данные Цикл
			Ссылка = Десериализовать(Ссылка);
			ПланыОбмена.УдалитьРегистрациюИзменений(Получатель, Ссылка);
		КонецЦикла;
		
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, "ok");
	
	Исключение
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция Queue_Count(ЗапросHTTP)
	
	Попытка
		КоличествоПоТипам = Новый ТаблицаЗначений;
		КоличествоПоТипам.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
		КоличествоПоТипам.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		//Детализировать = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "detailed") = "true";
		
		Получатель = УзелОбменаИзПараметровЗапроса(ЗапросHTTP);
		КоличествоПоТипам = КоличествоОбъектовВОчереди(Получатель);
		Результат = Новый Структура("Количество, КоличествоПоТипам", КоличествоПоТипам.Итог("Количество"), СервисHTTP.ПреобразоватьВДопустимыйТипДляJSON(КоличествоПоТипам));
		
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, Результат);
	
	Исключение
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция Queue_Types(ЗапросHTTP)
	
	Попытка
		ИмяПланаОбмена = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "plan");
		Результат = Новый Массив;
		ПланМД = Метаданные.ПланыОбмена[ИмяПланаОбмена];
		Для каждого СоставМД Из ПланМД.Состав Цикл
			Имя = СоставМД.Метаданные.ПолноеИмя();
			Имя = СтрЗаменить(Имя, "Справочник", "CatalogObject");
			Имя = СтрЗаменить(Имя, "Документ", "DocumentObject");
			Имя = СтрЗаменить(Имя, "РегистрСведений", "InformationRegisterRecordSet");
			Имя = СтрЗаменить(Имя, "РегистрНакопления", "AccumulationRegisterRecordSet");
			Результат.Добавить(Имя);
		КонецЦикла;
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, Результат);
	
	Исключение
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция Data_Read(ЗапросHTTP)

	Попытка
		Ссылка = ДесериализоватьПараметрЗапроса(ЗапросHTTP, "ref");
		Результат = Сериализовать(Ссылка.ПолучитьОбъект());
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, Результат);
	
	Исключение
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция Data_Write(ЗапросHTTP)
	
	Результат = Новый Структура;
	ЗагруженныеОбъекты = Новый Массив;
	ОшибкиЗагрузки = Новый Массив;
	
	Попытка
		Отправитель = УзелОбменаИзПараметровЗапроса(ЗапросHTTP);
		ДанныеСтрокой = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "data");
		ВерсияОтправителя = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "version");
		
		МассивДанныеСтрокой = Десериализовать(ДанныеСтрокой);
		Для каждого ДанныеСтрокой Из МассивДанныеСтрокой Цикл
			Попытка
				Объект = Десериализовать(ДанныеСтрокой);
				Если Объект = Неопределено Тогда
					ВызватьИсключение "Получено значение Неопределено для загрузки";
				КонецЕсли;
				
				Если ПроверкаИзмененности_ОбъектИзменен(Объект) Тогда
					Объект.ОбменДанными.Загрузка = Истина;
					Объект.ОбменДанными.Отправитель = Отправитель;
					Объект.Записать();
				КонецЕсли;
				
				Если СтрНайти(XMLТипЗнч(Объект).ИмяТипа, "Register") Тогда
					Объект.Очистить();
					ЗагруженныеОбъекты.Добавить(Сериализовать(Объект));
				Иначе
					ЗагруженныеОбъекты.Добавить(Сериализовать(Объект.Ссылка));
				КонецЕсли;
				
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ОшибкиЗагрузки.Добавить(ОписаниеОшибки);
				ОшибкиЗагрузки.Добавить(ДанныеСтрокой);
				
			КонецПопытки;
		КонецЦикла;
		
		Результат.Вставить("ЗагруженныеОбъекты", ЗагруженныеОбъекты);
		Результат.Вставить("ОшибкиЗагрузки", ОшибкиЗагрузки);
		
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, Результат);
	
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки);
		
	КонецПопытки;
	
КонецФункции

Функция Data_ReadObject(ЗапросHTTP)
	
	Попытка
		ИмяТипа = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "type");
		СсылкаСтрокой = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "ref");
		Код = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "code");
		Наименование = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "name");
		Номер = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "number");
		Дата = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "date");
		Дата = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
		ВМассиве = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "inarray") = "true";
		
		Если ЗначениеЗаполнено(СсылкаСтрокой) Тогда
			ТекущийОбъект = Десериализовать(СсылкаСтрокой);
			Если СтрЧислоВхождений(XMLТипЗнч(ТекущийОбъект).ИмяТипа, "Ref") > 0 Тогда
				ТекущийОбъект = ТекущийОбъект.ПолучитьОбъект();
			ИначеЕсли СтрЧислоВхождений(XMLТипЗнч(ТекущийОбъект).ИмяТипа, "RecordSet") > 0 Тогда
				ТекущийОбъект.Прочитать();
			КонецЕсли;
			
		ИначеЕсли СтрНайти(ИмяТипа, "Справочник") > 0 ИЛИ СтрНайти(ИмяТипа, "План") > 0 Тогда
			Менеджер = Новый(СтрЗаменить(ИмяТипа, "Объект", "Менеджер"));
			Если ЗначениеЗаполнено(Код) Тогда
				ТекущийОбъект = Менеджер.НайтиПоКоду(Код).ПолучитьОбъект();
			ИначеЕсли ЗначениеЗаполнено(Наименование) Тогда
				ТекущийОбъект = Менеджер.НайтиПоНаименованию(Наименование).ПолучитьОбъект();
			Иначе
				ТекущийОбъект = Новый(ИмяТипа);
			КонецЕсли;
			
		ИначеЕсли СтрНайти(ИмяТипа, "Документ") > 0  Тогда
			Менеджер = Новый(СтрЗаменить(ИмяТипа, "Объект", "Менеджер"));
			Если ЗначениеЗаполнено(Номер) Тогда
				ТекущийОбъект = Менеджер.НайтиПоНомеру(Номер, Дата).ПолучитьОбъект();
			Иначе
				ТекущийОбъект = Новый(ИмяТипа);
			КонецЕсли;
			
		Иначе
			ТекущийОбъект = Новый(ИмяТипа);
			
		КонецЕсли;
		
		Если ВМассиве Тогда
			Результат = Новый Массив;
			Результат.Добавить(Сериализовать(ТекущийОбъект));
		Иначе
			Результат = ТекущийОбъект;
		КонецЕсли;
		
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, Сериализовать(Результат));
	
	Исключение
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция Data_ReadObjects(ЗапросHTTP)
	
	Попытка
		Результат = Новый Массив;
		Массив = ДесериализоватьПараметрЗапроса(ЗапросHTTP, "data");
		Для каждого Ссылка Из Массив Цикл
			Ссылка = Десериализовать(Ссылка);
			Результат.Добавить(Сериализовать(Ссылка.ПолучитьОбъект()));
		КонецЦикла;
		
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, Сериализовать(Результат));
	
	Исключение
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция Service_Do(ЗапросHTTP)
	
	Попытка
		
		Результат = Неопределено;
		Код = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "code");
		ВходящиеПараметры = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "params");
		Выполнить(Код);
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, Сериализовать(Результат));
	
	Исключение
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция Service_DoEPF(ЗапросHTTP)
	
	Попытка
		
		Результат = Неопределено;
		ИмяОбработки = Base64Значение(СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "name"));
		ИмяМетода = Base64Значение(СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "func"));
		ПараметрыМетода = Base64Значение(СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "params"));
		ДвоичныеДанные = Base64Значение(СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "data"));
		Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		ИмяФайла = ВнешниеОбработки.Подключить(Адрес);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Результат = Вычислить("Обработка." + ИмяМетода + "(" + МассивВСтроку(ПараметрыМетода)+ ")");
		
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, Результат);
	
	Исключение
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция Service_Update(ЗапросHTTP)
	
	Попытка
		
		ДвоичныеДанные = Base64Значение(СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "data"));
		ИмяРасширения = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "name");
		Если НЕ ЗначениеЗаполнено(ИмяРасширения) Тогда
			ИмяРасширения = "Fastex";
		КонецЕсли;
		
		Расширения = РасширенияКонфигурации.Получить(Новый Структура("Имя", ИмяРасширения), ИсточникРасширенийКонфигурации.БазаДанных);
		Если Расширения.Количество() = 0 Тогда
			Расширение = РасширенияКонфигурации.Создать();
		Иначе
			Расширение = Расширения[0];
		КонецЕсли;
		
		Расширение.БезопасныйРежим = Ложь;
		Расширение.Записать(ДвоичныеДанные);
		
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, "ok, version: " + Расширение.Версия);
	
	Исключение
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция Service_Example(ЗапросHTTP)
	
	Попытка
		
		Результат = Неопределено;
		ИмяТипа = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "type");
		ВМассиве = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "inarray") = "true";
		
		Если СтрНайти(ИмяТипа, "Справочник") > 0  ИЛИ СтрНайти(ИмяТипа, "Документ") > 0 ИЛИ СтрНайти(ИмяТипа, "План") > 0 Тогда
			Менеджер = Новый(СтрЗаменить(ИмяТипа, "Объект", "Менеджер"));
			Выборка = Менеджер.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если СтрНайти(ИмяТипа, "Документ") = 0 И Выборка.ЭтоГруппа Тогда
					Продолжить;
				КонецЕсли;
				ТекущийОбъект = Выборка.Ссылка;
				Прервать;
			КонецЦикла;
			
		ИначеЕсли СтрНайти(ИмяТипа, "Регистр") > 0  Тогда
			Набор = Новый(ИмяТипа);
			Менеджер = Новый(СтрЗаменить(ИмяТипа, "НаборЗаписей", "Менеджер"));
			Выборка = Менеджер.Выбрать();
			Если Выборка.Следующий() Тогда
				МД = Набор.Метаданные();
				Если СтрНайти(ИмяТипа, "Накопления") > 0 ИЛИ СтрНайти(ИмяТипа, "Бухгалтерии") > 0 ИЛИ СтрНайти(ИмяТипа, "Сведений") > 0 И МД.ПериодичностьРегистраСведений = "ПериодичностьРегистраСведений.ПозицияРегистратора" Тогда
					Набор.Отбор.Регистратор.Установить(Выборка.Регистратор, Истина);
				Иначе
					Для каждого ИзмерениеМД Из МД.Измерения Цикл
						Набор.Отбор[ИзмерениеМД.Имя].Установить(Выборка[ИзмерениеМД.Имя], Истина);
					КонецЦикла;
				КонецЕсли;
				
				//Набор.Прочитать(); // нужен пустой набор для дальнешего запроса его состава из баз
				
			КонецЕсли;
			
			ТекущийОбъект = Набор;
			
		Иначе
			ТекущийОбъект = Новый(ИмяТипа);
			
		КонецЕсли;
		
		Если ВМассиве Тогда
			Результат = Новый Массив;
			Результат.Добавить(Сериализовать(ТекущийОбъект));
		Иначе
			Результат = ТекущийОбъект;
		КонецЕсли;
		
		Возврат СервисHTTP.Ответ(ЗапросHTTP, 200, Сериализовать(Результат));
	
	Исключение
		Возврат ОписаниеИсключения(ЗапросHTTP, ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеМетоды

Функция ОписаниеИсключения(ЗапросHTTP, Описание)

	Возврат СервисHTTP.Ответ(ЗапросHTTP, 500, Описание);

КонецФункции

Функция ДесериализоватьПараметрЗапроса(ЗапросHTTP, ИмяПараметра)

	Представление = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, ИмяПараметра);
	Если Представление = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Десериализовать(Представление);
	
КонецФункции

Функция Десериализовать(Представление, Знач Формат = "xml")
	
	Если ТипЗнч(Представление) = Тип("ДвоичныеДанные") Тогда
		Формат = НРег(Формат);
		Если Формат = "xml" Тогда
			Чтение = Новый ЧтениеXML;
			Чтение.ОткрытьПоток(Представление.ОткрытьПотокДляЧтения());
			Возврат СериализаторXDTO.ПрочитатьXML(Чтение);
			
		ИначеЕсли Формат = "json" Тогда
			Чтение = Новый ЧтениеJSON;
			Чтение.ОткрытьПоток(Представление.ОткрытьПотокДляЧтения());
			Возврат СериализаторXDTO.ПрочитатьJSON(Чтение);
			
		КонецЕсли;
	
	Иначе
		Формат = НРег(Формат);
		Если Формат = "xml" Тогда
			Чтение = Новый ЧтениеXML;
			Чтение.УстановитьСтроку(Представление);
			Возврат СериализаторXDTO.ПрочитатьXML(Чтение);
			
		ИначеЕсли Формат = "json" Тогда
			Чтение = Новый ЧтениеJSON;
			Чтение.УстановитьСтроку(Представление);
			Возврат СериализаторXDTO.ПрочитатьJSON(Чтение);
			
		КонецЕсли;
	
	КонецЕсли;

КонецФункции

Функция Сериализовать(Значение, Знач Формат = "xml", Вывод = "Строка")

	Формат = НРег(Формат);
	
	Если Вывод = "Строка" Тогда
		Если Формат = "xml" Тогда
			Запись = Новый ЗаписьXML;
			Запись.УстановитьСтроку();
			СериализаторXDTO.ЗаписатьXML(Запись, Значение);
			
		ИначеЕсли Формат = "json" Тогда
			Запись = Новый ЗаписьJSON;
			Запись.УстановитьСтроку();
			СериализаторXDTO.ЗаписатьJSON(Запись, Значение);
			
		КонецЕсли;
		
		Возврат Запись.Закрыть();
		
	ИначеЕсли Вывод = "Поток" Тогда
		Поток = Новый ПотокВПамяти;
		Если Формат = "xml" Тогда
			Запись = Новый ЗаписьXML;
			Запись.ОткрытьПоток(Поток);
			СериализаторXDTO.ЗаписатьXML(Запись, Значение);
			
		ИначеЕсли Формат = "json" Тогда
			Запись = Новый ЗаписьJSON;
			Запись.ОткрытьПоток(Поток);
			СериализаторXDTO.ЗаписатьJSON(Запись, Значение);
			
		КонецЕсли;
		
		Запись.Закрыть();
		Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();
	
	КонецЕсли;

КонецФункции

Функция ПараметрОтправитель(ЗапросHTTP)

	Возврат СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "sender");

КонецФункции

Функция УзелОбменаИзПараметровЗапроса(ЗапросHTTP)

	ИмяПланаОбмена = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "plan");
	Код = СервисHTTP.ПолучитьЗначениеПараметра(ЗапросHTTP, "node");
	Если ИмяПланаОбмена = Неопределено Тогда
		ВызватьИсключение "Параметр plan (имя плана обмена) не определен";
	ИначеЕсли Код = Неопределено Тогда
		ВызватьИсключение "Параметр node (код узла обмена) не определен";
	КонецЕсли;
	
	Возврат ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(СокрЛП(Код));

КонецФункции

Функция ПрефиксИБ()
	Возврат ОбменДаннымиСервер.ПрефиксИнформационнойБазы();
КонецФункции	

Функция ВерсияИБ()

	Результат = Метаданные.ПодробнаяИнформация;
	Результат = Сред(Результат, СтрНайти(ВРег(Результат), "ВЕРСИЯ ") + 7);
	Результат = Лев(Результат, СтрДлина(Результат) - 1);
	Попытка
		Результат = Число(Результат);
	Исключение
		Результат = "";
	КонецПопытки;
	
	Возврат XMLСтрока(Результат);

КонецФункции

Функция РасширенияИБ()

	Результат = Новый Структура;
	Расширения = РасширенияКонфигурации.Получить();
	Для каждого Расширение Из Расширения Цикл
		Результат.Вставить(Расширение.Имя, Расширение.Версия);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция КоличествоИзмененийМеньшеРазмераПорции(Узел, КоличествоЭлементов)
	
	Счетчик = 0;
	НачатьТранзакцию();
	Выборка = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного + 1);
	ОтменитьТранзакцию();
	Пока Выборка.Следующий() Цикл
		Счетчик = Счетчик + 1;
		Если Счетчик >= КоличествоЭлементов Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции // ()

// Код из расширения для обмена УТ10.3 - EntrepriseData
Функция ПолучитьИзмененияДляУзла(Узел, НомерСообщения, КоличествоЭлементов = 100)
	
	Результат = Новый Массив;
	ИмяПланаОбмена = Узел.Метаданные().Имя;
	
	Если КоличествоЭлементов = 0 ИЛИ КоличествоИзмененийМеньшеРазмераПорции(Узел, КоличествоЭлементов) Тогда
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Узел, НомерСообщения);
		Пока ВыборкаИзменений.Следующий() Цикл
			Результат.Добавить(ВыборкаИзменений.Получить());
		КонецЦикла;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Узел", Узел);
		ТребуемоеКоличество = КоличествоЭлементов;
		Состав = Метаданные.ПланыОбменаp[ИмяПланаОбмена].Состав;
		
		//Справочники
		Для каждого Элемент Из Состав Цикл
			Если ТребуемоеКоличество = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ИмяТаблицы = Элемент.Метаданные.ПолноеИмя();
			Если НЕ СтрНачинаетсяС(ИмяТаблицы, "Справочник") Тогда
				Продолжить;
			КонецЕсли;
			Запрос.Текст = СтрШаблон("ВЫБРАТЬ Первые %1 * ИЗ %2.Изменения Где Узел = &Узел", XMLСтрока(ТребуемоеКоличество), ИмяТаблицы);
			Изменения = Запрос.Выполнить().Выгрузить();
			Массив = Новый Массив;
			Для каждого Изменение Из Изменения Цикл
				Объект = Изменение.Ссылка.ПолучитьОбъект();
				Если НЕ Объект = Неопределено Тогда
					Массив.Добавить(Изменение.Ссылка);
					Результат.Добавить(Объект);
				КонецЕсли;
			КонецЦикла;
			Если Массив.Количество() > 0 Тогда
				ПланыОбмена.ВыбратьИзменения(Узел, НомерСообщения, Массив);
				ТребуемоеКоличество = ТребуемоеКоличество - Массив.Количество();
			КонецЕсли;
			
		КонецЦикла;
	
		//Документы
		ПолучитьИзмененияДокументовДляУзлаПоХронологии(Узел, НомерСообщения, ТребуемоеКоличество, Состав, Результат, Запрос);
		
		//Регистры накопления
		Для каждого Элемент Из Состав Цикл
			Если ТребуемоеКоличество = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ИмяТаблицы = Элемент.Метаданные.ПолноеИмя();
			Если НЕ СтрНачинаетсяС(ИмяТаблицы, "РегистрНакопления") Тогда
				Продолжить;
			КонецЕсли;
			Запрос.Текст = СтрШаблон("ВЫБРАТЬ Первые %1 * ИЗ %2.Изменения Где Узел = &Узел", XMLСтрока(ТребуемоеКоличество), ИмяТаблицы);
			Изменения = Запрос.Выполнить().Выгрузить();
			Если Изменения.Количество() > 0 Тогда
				Массив = Новый Массив;
				Для каждого Изменение Из Изменения Цикл
					Набор = РегистрыНакопления[Элемент.Метаданные.Имя].СоздатьНаборЗаписей();
					Для каждого Колонка Из Изменения.Колонки Цикл
						Если СтрНайти("НомерСообщения, Узел", Колонка.Имя) > 0 Тогда
							Продолжить;
						КонецЕсли;
						Набор.Отбор[Колонка.Имя].Установить(Изменение[Колонка.Имя], Истина);
					КонецЦикла;
					Массив.Добавить(Набор);
					Результат.Добавить(Набор);
				КонецЦикла;
				ПланыОбмена.ВыбратьИзменения(Узел, НомерСообщения, Массив);
				ТребуемоеКоличество = ТребуемоеКоличество - Изменения.Количество();
			КонецЕсли;
			
		КонецЦикла;
		
		//Регистры сведений
		Для каждого Элемент Из Состав Цикл
			Если ТребуемоеКоличество = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ИмяТаблицы = Элемент.Метаданные.ПолноеИмя();
			Если НЕ СтрНачинаетсяС(ИмяТаблицы, "РегистрСведений") Тогда
				Продолжить;
			КонецЕсли;
			Запрос.Текст = СтрШаблон("ВЫБРАТЬ Первые %1 * ИЗ %2.Изменения Где Узел = &Узел", XMLСтрока(ТребуемоеКоличество), ИмяТаблицы);
			Изменения = Запрос.Выполнить().Выгрузить();
			Если Изменения.Количество() > 0 Тогда
				Массив = Новый Массив;
				Для каждого Изменение Из Изменения Цикл
					Набор = РегистрыСведений[Элемент.Метаданные.Имя].СоздатьНаборЗаписей();
					Для каждого Колонка Из Изменения.Колонки Цикл
						Если СтрНайти("НомерСообщения, Узел", Колонка.Имя) > 0 Тогда
							Продолжить;
						КонецЕсли;
						Набор.Отбор[Колонка.Имя].Установить(Изменение[Колонка.Имя], Истина);
					КонецЦикла;
					Массив.Добавить(Набор);
					Результат.Добавить(Набор);
				КонецЦикла;
				ПланыОбмена.ВыбратьИзменения(Узел, НомерСообщения, Массив);
				ТребуемоеКоличество = ТребуемоеКоличество - Изменения.Количество();
			КонецЕсли;
			
		КонецЦикла;
		
		//редкий случай: не добрали по количеству, значит в изменениях в основном удаления - выбираем все
		Если ТребуемоеКоличество > 0 Тогда
			Результат = Новый Массив;
			ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Узел, НомерСообщения);
			Пока ВыборкаИзменений.Следующий() Цикл
				Результат.Добавить(ВыборкаИзменений.Получить());
			КонецЦикла;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИзмененияДокументовДляУзлаПоХронологии(Узел, НомерСообщения, ТребуемоеКоличество, Состав, Результат, Запрос)

	Изменения = Новый ТаблицаЗначений;
	Изменения.Колонки.Добавить("Ссылка");
	Изменения.Колонки.Добавить("Дата");
	
	Для каждого Элемент Из Состав Цикл
		ИмяТаблицы = Элемент.Метаданные.ПолноеИмя();
		Если НЕ СтрНачинаетсяС(ИмяТаблицы, "Документ") Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Текст = СтрШаблон("ВЫБРАТЬ Первые %1 Ссылка, Ссылка.Дата КАК Дата ИЗ %2.Изменения Где Узел = &Узел", XMLСтрока(ТребуемоеКоличество), ИмяТаблицы);
		Таблица = Запрос.Выполнить().Выгрузить();
		Для каждого Строка Из Таблица Цикл
			Изменение = Изменения.Добавить();
			Изменение.Ссылка = Строка.Ссылка;
			Изменение.Дата = Строка.Дата;
		КонецЦикла;
		
	КонецЦикла;
	
	Изменения.Сортировать("Дата");

	Для каждого Изменение Из Изменения Цикл
		Если ТребуемоеКоличество = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Объект = Изменение.Ссылка.ПолучитьОбъект();
		Если НЕ Объект = Неопределено Тогда
			Массив = Новый Массив;
			Массив.Добавить(Изменение.Ссылка);
			ПланыОбмена.ВыбратьИзменения(Узел, НомерСообщения, Массив);
			Результат.Добавить(Объект);
			ТребуемоеКоличество = ТребуемоеКоличество - 1;
		КонецЕсли;
		
	КонецЦикла;

КонецФункции

Функция МассивВСтроку(Массив)

	Результат = "";
	Для каждого Элемент Из Массив Цикл
		Результат = Результат + "," + Элемент;
	КонецЦикла;
	
	Возврат Сред(Результат, 2);

КонецФункции

Процедура ЗафиксироватьЗавершениеОбменаВРегистреСведений(СтруктураНастроекОбмена)
	
	// Создаем структуру для новой записи в РС.
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("УзелИнформационнойБазы",    СтруктураНастроекОбмена.УзелИнформационнойБазы);
	СтруктураЗаписи.Вставить("ДействиеПриОбмене",         СтруктураНастроекОбмена.ДействиеПриОбмене);
	
	СтруктураЗаписи.Вставить("РезультатВыполненияОбмена", СтруктураНастроекОбмена.РезультатВыполненияОбмена);
	СтруктураЗаписи.Вставить("ДатаНачала",                СтруктураНастроекОбмена.ДатаНачала);
	СтруктураЗаписи.Вставить("ДатаОкончания",             СтруктураНастроекОбмена.ДатаОкончания);
	
	РегистрыСведений.СостоянияОбменовДанными.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

Процедура ЗафиксироватьУспешныйОбменДаннымиВРегистреСведений(СтруктураНастроекОбмена)
	
	// Создаем структуру для новой записи в РС.
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("УзелИнформационнойБазы", СтруктураНастроекОбмена.УзелИнформационнойБазы);
	СтруктураЗаписи.Вставить("ДействиеПриОбмене",      СтруктураНастроекОбмена.ДействиеПриОбмене);
	СтруктураЗаписи.Вставить("ДатаОкончания",          СтруктураНастроекОбмена.ДатаОкончания);
	
	РегистрыСведений.СостоянияУспешныхОбменовДанными.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

Функция КоличествоОбъектовВОчереди(Узел)
	
	ТекстПостроитель = Новый ЗаписьXML;
	ТекстПостроитель.УстановитьСтроку();
    ТекстПостроитель.ЗаписатьБезОбработки("ВЫБРАТЬ ""ПерваяЗапись"" КАК Тип, Сумма(0) КАК Количество Имеющие Сумма(0) > 0");
    Состав = Узел.Метаданные().Состав;
    Для каждого ОбъектСостава Из Состав Цикл
		ОбъектМетаданных = ОбъектСостава.Метаданные;
		ИмяТипа = ОбъектМетаданных.ПолноеИмя();
		// TODO: учесть регистры расчета
		Если СтрНачинаетсяС(ИмяТипа, "РегистрРасчета") Тогда
			Продолжить;
		ИначеЕсли СтрНайти(ИмяТипа, "ВерсииОбъектов") > 0 Тогда
			Продолжить;
		КонецЕсли;
		ТекстПостроитель.ЗаписатьБезОбработки(СтрШаблон(" ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ""%1"", Сумма(1) ИЗ %2.Изменения ГДЕ Узел = &Узел СГРУППИРОВАТЬ ПО ""%1"" ИМЕЮЩИЕ Сумма(1) > 0", СтрЗаменить(ИмяТипа, ".", "_"), ИмяТипа));
    КонецЦикла; 
    
    Запрос = Новый Запрос;
	Запрос.Текст = ТекстПостроитель.Закрыть();
    Запрос.УстановитьПараметр("Узел", Узел);
    Результат = Запрос.Выполнить().Выгрузить();
	Результат.Сортировать("Тип");
	Для каждого ТекущаяСтрока Из Результат Цикл
		ТекущаяСтрока.Тип = СтрЗаменить(ТекущаяСтрока.Тип, "_", ".");
	КонецЦикла;
    
    Возврат Результат;
	
КонецФункции

Функция ВыполнитьДействияПередЧтениемИзменений(Получатель)

	Попытка
		ОбменДаннымиСервер.ОтфильтроватьРегистрациюИзмененийДляУзла(Получатель);
	Исключение
	КонецПопытки;

КонецФункции

#КонецОбласти

#Область ОМ_ПроверкаИзмененности

// Возвращает изменность объекта по сравнению с сохраненной версией
//Источник - ДокументОбъект, СправочникОбъект.
//РежимЗаписи - РежимЗаписиДокумента.
//ИсключаемыеРеквизиты - Строка. Список реквизитов, несущественных при определении изменности
//СодержаниеВерсий - Структура. Содержит описание сохраненной и текущией версии для формирования отчета о сравнении объектов
Функция ПроверкаИзмененности_ОбъектИзменен(Источник, Знач РежимЗаписи = Неопределено, Знач ВыполнятьПовторнуюПроверку = Истина, Знач ИсключаемыеРеквизиты = "", СодержаниеВерсий = Неопределено) Экспорт

	Если Источник.ДополнительныеСвойства.Свойство("ОбъектИзменен") И НЕ ВыполнятьПовторнуюПроверку Тогда
		Возврат Источник.ДополнительныеСвойства.ОбъектИзменен;
	КонецЕсли;
	
	СодержаниеВерсий = Новый Структура("ИсходнаяВерсия, ТекущаяВерсия");
	
	Если Источник = Неопределено Тогда
		СодержаниеВерсий.ИсходнаяВерсия = "Неопределено";
		СодержаниеВерсий.ТекущаяВерсия = "";
		Источник.ДополнительныеСвойства.Вставить("ОбъектИзменен", Истина);
		Возврат Истина;
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(Источник);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
	
	Если Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) ИЛИ Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		ИсточникДо = ПроверкаИзмененности_КопияОбъекта(Источник);
		ИсточникДо.Прочитать();
		ПроверкаИзмененности_ЗаполнитьСодержаниеВерсий(СодержаниеВерсий, Источник, ИсточникДо, ИсключаемыеРеквизиты);
	ИначеЕсли НЕ Метаданные.Справочники.Содержит(ОбъектМетаданных) И НЕ Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		СодержаниеВерсий.ИсходнаяВерсия = "" + ТипЗнч(Источник) + " не является справочником или документом";
		СодержаниеВерсий.ТекущаяВерсия = "";
		Источник.ДополнительныеСвойства.Вставить("ОбъектИзменен", Истина);
	ИначеЕсли Источник.ЭтоНовый() Тогда
		СодержаниеВерсий.ИсходнаяВерсия = "Новый объект";
		СодержаниеВерсий.ТекущаяВерсия = "";
		Источник.ДополнительныеСвойства.Вставить("ОбъектИзменен", Истина);
	ИначеЕсли Источник.Ссылка = Неопределено Тогда
		СодержаниеВерсий.ИсходнаяВерсия = "Новый объект";
		СодержаниеВерсий.ТекущаяВерсия = "";
		Источник.ДополнительныеСвойства.Вставить("ОбъектИзменен", Истина);
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ Источник.Проведен Тогда
		СодержаниеВерсий.ИсходнаяВерсия = "Не проведен";
		СодержаниеВерсий.ТекущаяВерсия = "Проведен";
		Источник.ДополнительныеСвойства.Вставить("ОбъектИзменен", Истина);
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И Источник.Проведен Тогда
		СодержаниеВерсий.ИсходнаяВерсия = "Проведен";
		СодержаниеВерсий.ТекущаяВерсия = "Не проведен";
		Источник.ДополнительныеСвойства.Вставить("ОбъектИзменен", Истина);
	Иначе
		ПроверкаИзмененности_ЗаполнитьСодержаниеВерсий(СодержаниеВерсий, Источник, Источник.Ссылка.ПолучитьОбъект(), ИсключаемыеРеквизиты);
	КонецЕсли;
	
	Возврат Источник.ДополнительныеСвойства.ОбъектИзменен;

КонецФункции

Процедура ПроверкаИзмененности_ЗаполнитьСодержаниеВерсий(СодержаниеВерсий, Источник, ИсточникДо, ИсключаемыеРеквизиты)

	ТипЗначения = ТипЗнч(Источник);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	ЗаписатьXML(Запись, ИсточникДо);
	ИсходноеСодержание = Запись.Закрыть();
	
	Запись.УстановитьСтроку();
	ПроверкаИзмененности_ПМ_ВызватьСобытияПередЗаписью(Источник);
	ЗаписатьXML(Запись, Источник);
	ТекущееСодержание = Запись.Закрыть();
	
	ПроверкаИзмененности_ПМ_ДополнитьИсключаемыеРеквизиты(Источник, ИсключаемыеРеквизиты);
	Если НЕ ПустаяСтрока(ИсключаемыеРеквизиты) Тогда
		ОбработкаСтрок_УдалитьУзлыXML(ИсключаемыеРеквизиты, ИсходноеСодержание);
		ОбработкаСтрок_УдалитьУзлыXML(ИсключаемыеРеквизиты, ТекущееСодержание);
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ОбъектИзменен", НЕ ИсходноеСодержание = ТекущееСодержание);
	СодержаниеВерсий.ИсходнаяВерсия = ИсходноеСодержание;
	СодержаниеВерсий.ТекущаяВерсия = ТекущееСодержание;

КонецПроцедуры

Функция ПроверкаИзмененности_КопияОбъекта(Знач Объект)

	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	ЗаписатьXML(Запись, Объект);
	Содержание = Запись.Закрыть();
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Содержание);
	Результат = ПрочитатьXML(Чтение);
	Чтение.Закрыть();
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОМ_ОбработкаСтрок

Функция ОбработкаСтрок_УдалитьУзлыXML(Узлы, Содержание) Экспорт

	МассивУзлов = ОбработкаСтрок_РазложитьСтрокуВМассивПодстрок(Узлы);
	Для каждого ИмяУзла Из МассивУзлов Цикл
		ОбработкаСтрок_УдалитьУзелXML(ИмяУзла, Содержание);
	КонецЦикла;

КонецФункции // ()

Функция ОбработкаСтрок_УдалитьУзелXML(Знач ИмяУзла, Содержание) Экспорт

	НачальнаяПозиция = 1;
	Пока НачальнаяПозиция > 0 Цикл
		ОткрытиеУзла = "<"+ИмяУзла+">";
		НачальнаяПозиция = Найти(Содержание, ОткрытиеУзла);
		Если НачальнаяПозиция > 0 Тогда
			ЗакрытиеУзла = "</"+ИмяУзла+">";
			КонечнаяПозиция = Найти(Содержание, ЗакрытиеУзла)+СтрДлина(ЗакрытиеУзла);
			Содержание = ?(НачальнаяПозиция = 1, "", Лев(Содержание, НачальнаяПозиция-1)) + Сред(Содержание, КонечнаяПозиция);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции // ()

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые
//  строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
// Примечание:
//  В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
//  рекомендуется использовать функцию платформы СтрРазделить.
Функция ОбработкаСтрок_РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

#КонецОбласти

#Область ПроверкаИзмененности_ПМ

//Исключение реквизитов при проверке измененности для конкретных видов объектов
//Источник - ДокументОбъект, СправочникОбъект.
//ИсключаемыеРеквизиты - Строка. Наименования реквизитов, которые нужно исключить при определении измененности объекта
Функция ПроверкаИзмененности_ПМ_ДополнитьИсключаемыеРеквизиты(Источник, ИсключаемыеРеквизиты) Экспорт

	//ИсключаемыеРеквизиты = ИсключаемыеРеквизиты + "Ответственный";
	
КонецФункции

Процедура ПроверкаИзмененности_ПМ_ВызватьСобытияПередЗаписью(Источник, Замещение = Истина) Экспорт

	ТипЗначения = ТипЗнч(Источник);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ВыполненыПроцедурыПередЗаписью") ИЛИ НЕ Источник.ДополнительныеСвойства.ВыполненыПроцедурыПередЗаписью Тогда
		Источник.ДополнительныеСвойства.Вставить("ВыполненыПроцедурыПередЗаписью", Истина);
		Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			//ДополнительныеМеханизмыПодписки.ПередЗаписьюСправочника(Источник, Ложь);
		ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			//ТекущийРежимЗаписи = РежимЗаписиДокумента.Запись;
			//ДополнительныеМеханизмыПодписки.ПередЗаписьюДокумента(Источник, Ложь, ТекущийРежимЗаписи, Неопределено);
		ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
			//ДополнительныеМеханизмыПодписки.ПередЗаписьюРегистраНакопления(Источник, Ложь, Замещение);
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
			//ДополнительныеМеханизмыПодписки.ПередЗаписьюРегистраСведений(Источник, Ложь);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
